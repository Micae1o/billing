version: "3.8"

services:
  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5432:5432"
    networks:
      - billing-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend service configuration
  backend:
    build:
      context: ./backend
    container_name: backend
    ports:
      - "4000:4000"
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=db
      - BACKEND_URL=${BACKEND_URL}
      - PORT=${PORT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - BASIC_AUTH_USERNAME=${BASIC_AUTH_USERNAME}
      - BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASSWORD}
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - billing-network

  # Frontend service configuration
  admin-panel:
    build:
      context: ./admin-panel
    container_name: admin-panel
    ports:
      - "3001:3000"
    environment:
      - API_URL=${API_URL}
    env_file:
      - ./admin-panel/.env
    depends_on:
      - backend
    networks:
      - billing-network

# Define a custom network for services to communicate
networks:
  billing-network:
    driver: bridge

volumes:
  postgres-data:
